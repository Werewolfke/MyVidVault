version: '3.9'

services:
  redis:
    image: redis:7
    ports:
      - "6379:6379"
    restart: unless-stopped
  db:
    image: postgres:16
    shm_size: 1g
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_MAX_CONNECTIONS: 1000
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

    command:
      - "postgres"
      - "-c"
      - "max_connections=1000"
      - "-c"
      - "password_encryption=md5"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  pgbouncer:
    image: edoburu/pgbouncer:latest
    depends_on:
      - db
    ports:
      - "6432:6432"
    environment:
      DB_HOST: db
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      POOL_MODE: transaction
      MAX_CLIENT_CONN: 500
      DEFAULT_POOL_SIZE: 20
      RESERVE_POOL_SIZE: 2
      RESERVE_POOL_TIMEOUT: 5
      LISTEN_PORT: 6432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h ${DB_HOST:-db} -p ${LISTEN_PORT:-6432} -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    volumes:
      - ./pgbouncer.custom.ini:/etc/pgbouncer/pgbouncer.ini:ro
      - ./userlist.txt:/etc/pgbouncer/userlist.txt:ro

  api:
    build: ./api
    # Use Gunicorn with async workers for high concurrency
    command: ["gunicorn", "api.wsgi:application", "-b", "0.0.0.0:8000", "--workers=4", "--threads=8", "--timeout=60", "--access-logfile=-", "--error-logfile=-"]
    ulimits:
      nofile:
        soft: 65535
        hard: 65535
    volumes:
      - ./api:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    # Remove ports to allow multiple replicas
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      pgbouncer:
        condition: service_healthy
    restart: unless-stopped
    # Enable horizontal scaling for high traffic
    deploy:
      replicas: 4
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  nginx:
    image: nginx:1.25
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./frontend/dist:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      - api
    restart: unless-stopped

volumes:
  postgres_data:
  static_volume:
  media_volume: