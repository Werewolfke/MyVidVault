# Generated by Django 5.2.3 on 2025-06-15 23:21

import django.db.models.deletion
import users.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('operations', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('imageUrl', models.URLField(blank=True, max_length=1024, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collections', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Channel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('imageUrl', models.URLField(blank=True, max_length=1024, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='channels', to='users.collection')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, null=True)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to=users.models.avatar_upload_to)),
                ('default_bookmark_orientation', models.CharField(blank=True, choices=[('straight', 'Straight'), ('gay', 'Gay'), ('bi', 'Bi'), ('trans', 'Trans'), ('sfw', 'SFW')], help_text='Default orientation to pre-fill when creating a new bookmark.', max_length=15, null=True)),
                ('notify_on_follow', models.BooleanField(default=True, help_text='Receive a notification when someone starts following you.')),
                ('notify_on_own_video_bookmarked', models.BooleanField(default=True, help_text='Receive a notification when someone bookmarks one of your videos.')),
                ('notify_on_new_bookmark_from_followed_user', models.BooleanField(default=True, help_text='Receive a notification when a user you follow creates a new public bookmark.')),
                ('notify_on_own_video_liked', models.BooleanField(default=True, help_text='Receive a notification when someone likes one of your videos.')),
                ('default_bookmark_collection', models.ForeignKey(blank=True, help_text='Default collection to pre-select when creating a new bookmark.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.collection')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tier', models.CharField(choices=[('premium', 'Premium')], default='premium', help_text='The subscription tier.', max_length=50)),
                ('start_date', models.DateTimeField(help_text='The date and time when the subscription starts.')),
                ('end_date', models.DateTimeField(help_text='The date and time when the subscription ends.')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates if the subscription is currently active. Can be manually overridden or determined by dates.')),
                ('notes', models.TextField(blank=True, help_text='Administrative notes about this subscription (e.g., reason for manual grant).', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(help_text='The user who has this subscription.', on_delete=django.db.models.deletion.CASCADE, related_name='subscription', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Subscription',
                'verbose_name_plural': 'Subscriptions',
                'ordering': ['-end_date', 'user__username'],
            },
        ),
        migrations.CreateModel(
            name='Bookmark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=300)),
                ('description', models.TextField(blank=True, null=True)),
                ('access', models.CharField(choices=[('private', 'Private'), ('public', 'Public'), ('adult', 'Adult')], default='public', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tags', models.ManyToManyField(blank=True, related_name='tagged_bookmarks', to='operations.tag')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookmarks', to=settings.AUTH_USER_MODEL)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookmarks', to='operations.video')),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookmarks', to='users.channel')),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['video', 'access', 'created_at'], name='bm_vid_acc_crt_idx'), models.Index(fields=['user', 'created_at'], name='bm_usr_crt_idx'), models.Index(fields=['access', 'created_at'], name='bm_acc_crt_idx')],
                'unique_together': {('user', 'channel', 'video')},
            },
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('followed', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to=settings.AUTH_USER_MODEL)),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('follower', 'followed')},
            },
        ),
        migrations.CreateModel(
            name='MutedUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('muted_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='muted', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='muter', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'muted_user')},
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('verb', models.CharField(help_text="The verb describing the action (e.g., 'started following you', 'saved your bookmark').", max_length=255)),
                ('notification_type', models.CharField(choices=[('follow', 'Follow'), ('bookmark_save', 'Bookmark Save'), ('new_content', 'New Content'), ('system', 'System Message'), ('video_like', 'Video Like'), ('video_bookmark', 'Video Bookmark')], db_index=True, default='system', max_length=20)),
                ('target_object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('action_object_object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('is_read', models.BooleanField(db_index=True, default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('action_object_content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notification_action_object', to='contenttypes.contenttype')),
                ('actor', models.ForeignKey(blank=True, help_text='The user who performed the action that triggered the notification.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='actions_triggered', to=settings.AUTH_USER_MODEL)),
                ('recipient', models.ForeignKey(help_text='The user who receives the notification.', on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
                ('target_content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notification_target', to='contenttypes.contenttype')),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['recipient', 'is_read', '-created_at'], name='users_notif_recipie_3fd664_idx')],
            },
        ),
    ]
